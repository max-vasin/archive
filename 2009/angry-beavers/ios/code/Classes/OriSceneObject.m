//=======================================================================================================================
//  File:		OriSceneObject.m
//  Project:	heli
//	Desc:		Base game object container class implementation
//
//  Created by Max Vasin on 3/24/11.
//  Copyright 2011 Origin. All rights reserved.
//=======================================================================================================================

// ******** IMPORTS ********

#import "OriSceneObject.h"
#import "OriScene.h"
#import "OriResourceManager.h"

// ******** IMPLEMENTATION ********

@implementation OriSceneObject

//#######################################################################################################################
// PROPERTIES
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// SYNTHESIZED PROPERTIES
//-----------------------------------------------------------------------------------------------------------------------

@synthesize propLayer		= m_layer;
@synthesize propVelocity	= m_velocity;
@synthesize propPosition	= m_position;
@synthesize propScale		= m_scale;

//-----------------------------------------------------------------------------------------------------------------------
// PROPERTY: scene
//-----------------------------------------------------------------------------------------------------------------------

- (void)setPropScene:(OriScene*)scene
{
	m_scene = scene;
}

- (OriScene*)propScene
{
	return m_scene;
}

//-----------------------------------------------------------------------------------------------------------------------
// PROPERTY: parent object
//-----------------------------------------------------------------------------------------------------------------------

- (void)setPropParent:(OriSceneObject*)parent
{
	m_parent = parent;
}

- (OriSceneObject*)propParent
{
	return m_parent;
}

//#######################################################################################################################
// CONSTRUCTION\DESTRUCTION
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Default initializer
//-----------------------------------------------------------------------------------------------------------------------

- (id)init
{
	if ( (self = [super init]) )
	{
		m_velocity	= [[Vector2 alloc] initWithX:0 Y:0];
		m_position	= [[Vector2 alloc] initWithX:0 Y:0];
		m_scale		= [[Vector2 alloc] initWithX:1 Y:1];
	}
	return self;
}

//-----------------------------------------------------------------------------------------------------------------------
// Parent link initializer
//-----------------------------------------------------------------------------------------------------------------------

- (id)initWithParent:(OriSceneObject*)parent
{
	if ( (self = [self init]) )
	{
		m_parent = parent;
	}
	return self;
}

//-----------------------------------------------------------------------------------------------------------------------
// Desctructor
//-----------------------------------------------------------------------------------------------------------------------

- (void)dealloc
{
	[m_velocity release];
	[m_position release];
	[m_scale release];
	
	[super dealloc];
}

//#######################################################################################################################
// OBJECT TYPE PROPERTIES
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Scene object type
//-----------------------------------------------------------------------------------------------------------------------

- (enSceneObjectType)type
{
	return eSceneObjectDummy;
}

//-----------------------------------------------------------------------------------------------------------------------
// Mutable object (both renderables and containers) must implement this to get updates
//-----------------------------------------------------------------------------------------------------------------------

- (BOOL)isMutable
{
	return FALSE;
}

//-----------------------------------------------------------------------------------------------------------------------
// Dynamic object (both renderables and containers) must implement this to get position updates
//-----------------------------------------------------------------------------------------------------------------------

- (BOOL)isDynamic
{
	return FALSE;
}


//-----------------------------------------------------------------------------------------------------------------------
// Objects must return array of layer-dependent properties (scene will rearrange objects on this props changes)
//-----------------------------------------------------------------------------------------------------------------------

- (NSArray*)watchForPropsToRearrange
{
	return nil;
}

//#######################################################################################################################
// RENDERABLE RELATED METHODS
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Must return renderable object bounding rectangle
//-----------------------------------------------------------------------------------------------------------------------

- (oriRect)bounds
{
	oriRect zeroRect = { {0, 0} , {0, 0} };
	
	return zeroRect;
}

//-----------------------------------------------------------------------------------------------------------------------
// Renders object
//-----------------------------------------------------------------------------------------------------------------------

- (void)render
{

}

//#######################################################################################################################
// CONTAINER RELATED METHODS
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Container object must use this methods to attach content to scene
//-----------------------------------------------------------------------------------------------------------------------

- (void)attachContent:(OriScene*)scene
{
	
}

//-----------------------------------------------------------------------------------------------------------------------
// Container object must use this methods to detach content from scene
//-----------------------------------------------------------------------------------------------------------------------

- (void)detachContent:(OriScene*)scene
{
	
}

//#######################################################################################################################
// MUTABILITY
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Updates object with time delta value
//-----------------------------------------------------------------------------------------------------------------------

- (void)update:(oriFloat)delta
{

}

//#######################################################################################################################
// DIRECT ACCESS
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Sets position vector components to new values
//-----------------------------------------------------------------------------------------------------------------------

- (void)setPositionX:(oriFloat)x Y:(oriFloat)y
{
	if (m_position)
	{
		m_position->x = x;
		m_position->y = y;
	}
	else
		m_position = [[Vector2 alloc] initWithX:x Y:y];
}

//-----------------------------------------------------------------------------------------------------------------------
// Sets velocity vector components to new values
//-----------------------------------------------------------------------------------------------------------------------

- (void)setVelocityX:(oriFloat)x Y:(oriFloat)y
{
	if (m_velocity)
	{
		m_velocity->x = x;
		m_velocity->y = y;
	}
	else
		m_velocity = [[Vector2 alloc] initWithX:x Y:y];
}

//-----------------------------------------------------------------------------------------------------------------------
// Updates object position with given time and current velocity
//-----------------------------------------------------------------------------------------------------------------------

- (void)updatePosition:(oriFloat)time
{
	if (m_velocity && m_position)
	{
		m_position->x += m_velocity->x * time;
		m_position->y += m_velocity->y * time;
	}
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns object absolute translation (scene+parent chain)
//-----------------------------------------------------------------------------------------------------------------------

- (void)absoluteTranslationX:(oriFloat*)x Y:(oriFloat*)y
{
	oriFloat localX = 0.0f, localY = 0.0f;
	
	if (m_parent)
	{
		[m_parent absoluteTranslationX:&localX Y:&localY];
	}
	else
	{
		if (m_scene)
		{
			Vector2* sceneTranslation = m_scene.propTranslate;
			
			if (sceneTranslation)
			{
				localX = sceneTranslation->x;
				localY = sceneTranslation->y;
			}
		}
	}
	
	if (m_position)
	{
		localX += m_position->x;
		localY += m_position->y;
	}
	
	
	if (x)
		*x = localX;
	
	if (y)
		*y = localY;
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns object scene translation (parent chain)
//-----------------------------------------------------------------------------------------------------------------------

- (void)sceneTranslationX:(oriFloat*)x Y:(oriFloat*)y
{
	oriFloat localX = 0.0f, localY = 0.0f;
	
	if (m_parent)
		[m_parent absoluteTranslationX:&localX Y:&localY];
	
	if (m_position)
	{
		localX += m_position->x;
		localY += m_position->y;
	}
	
	if (x)
		*x = localX;
	
	if (y)
		*y = localY;
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns object absolute scale (scene+parent chain)
//-----------------------------------------------------------------------------------------------------------------------

- (void)absoluteScaleX:(oriFloat*)x Y:(oriFloat*)y
{
	oriFloat localX = 1.0f, localY = 1.0f;
	
	if (m_parent)
	{
		[m_parent absoluteScaleX:&localX Y:&localY];
	}
	else
	{
		if (m_scene)
		{
			Vector2* sceneScale = m_scene.propScale;
			
			if (sceneScale)
			{
				localX = sceneScale->x;
				localY = sceneScale->y;
			}
		}
	}
	
	if (m_scale)
	{
		localX *= m_scale->x;
		localY *= m_scale->y;
	}
	
	
	if (x)
		*x = localX;
	
	if (y)
		*y = localY;
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns object scene scale (parent chain)
//-----------------------------------------------------------------------------------------------------------------------

- (void)sceneScaleX:(oriFloat*)x Y:(oriFloat*)y
{
	oriFloat localX = 1.0f, localY = 1.0f;
	
	if (m_parent)
		[m_parent sceneScaleX:&localX Y:&localY];
	
	if (m_scale)
	{
		localX *= m_scale->x;
		localY *= m_scale->y;
	}
	
	if (x)
		*x = localX;
	
	if (y)
		*y = localY;
}



//#######################################################################################################################
// INTERNAL
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Layer-sorting selector
//-----------------------------------------------------------------------------------------------------------------------

- (NSInteger)layerSort:(OriSceneObject*)entry
{
	if (m_layer < entry->m_layer)
		return NSOrderedAscending;
	
	if (m_layer == entry->m_layer)
		return NSOrderedSame;
	
	return NSOrderedDescending;
}


@end
