//=======================================================================================================================
//  File:		OriTileRenderable.m
//  Project:	heli
//	Desc:		Tile renderable scene object class implementation
//
//  Created by Max Vasin on 6/3/11.
//  Copyright 2011 Origin. All rights reserved.
//=======================================================================================================================

// ******** IMPORTS ********

#import "OriTileRenderable.h"
#import "OriTilemapContainer.h"

// ******** IMLEMENTATION ********

@implementation OriTileRenderable

//#######################################################################################################################
// PROPERTIES
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// PROPERTY: tile color
//-----------------------------------------------------------------------------------------------------------------------

- (void)setPropColor:(oglColor)color
{
	m_shapeDrawer.propColor = color;
}

- (oglColor)propColor
{
	return m_shapeDrawer.propColor;
}


//#######################################################################################################################
// INITIALIZERS\DESTRUCTORS
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Designated tile renderable initializer
//-----------------------------------------------------------------------------------------------------------------------

- (id)initWithContainer:(OriTilemapContainer*)container andTile:(OriTile*)tile
{
	if ( (self = [super initWithParent:container]) )
	{
		m_shapeDrawer	= [[OriShapeDrawer alloc] initRectangle];
		
		[m_shapeDrawer rectangleSetSize:tile.propTileset.propTileSize];
		[m_shapeDrawer rectangleSetMapping:tile.propMap];
		m_shapeDrawer.propTexture = tile.propTileset.propTexture;
		
		m_tileBounds.min.x	= 0;
		m_tileBounds.min.y	= 0;
		
		m_tileBounds.max.x	= tile.propTileset.propTileSize.width;
		m_tileBounds.max.y	= tile.propTileset.propTileSize.height;
	}
	return self;
}

//-----------------------------------------------------------------------------------------------------------------------
// Destructor
//-----------------------------------------------------------------------------------------------------------------------

- (void)dealloc
{
	[m_shapeDrawer release];
	
	[super dealloc];
}

//#######################################################################################################################
// OVERRIDINGS OF OriSceneObject
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// We are renderable object
//-----------------------------------------------------------------------------------------------------------------------

- (enSceneObjectType)type
{
	return eSceneObjectRenderable;
}

//-----------------------------------------------------------------------------------------------------------------------
// We are immutable
//-----------------------------------------------------------------------------------------------------------------------

- (BOOL)isMutable
{
	return NO;
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns tile bounds
//-----------------------------------------------------------------------------------------------------------------------

- (oriRect)bounds
{
	return m_tileBounds;
}


//-----------------------------------------------------------------------------------------------------------------------
// Rendering tile
//-----------------------------------------------------------------------------------------------------------------------

- (void)render
{
	//glDisable(GL_BLEND);
	//glEnable(GL_ALPHA_TEST);
	//glAlphaFunc(GL_GREATER, 0);
	
	[m_shapeDrawer render];
}



@end
