//=======================================================================================================================
//  File:		OriHexGridCellRenderable.m
//  Project:	heli
//	Desc:		Hex grid cell renderable scene object implementation
//
//  Created by Max Vasin on 6/7/11.
//  Copyright 2011 Origin. All rights reserved.
//=======================================================================================================================

// ******** IMPORTS ********

#import "OriHexGridCellRenderable.h"
#import "OriHexGridContainer.h"

// ******** IMPLEMENTATION ********

@implementation OriHexGridCellRenderable

//#######################################################################################################################
// PROPERTIES
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// PROPERTY: tile color
//-----------------------------------------------------------------------------------------------------------------------

- (void)setPropColor:(oglColor)color
{
	m_shapeDrawer.propColor = color;
}

- (oglColor)propColor
{
	return m_shapeDrawer.propColor;
}


//#######################################################################################################################
// INITIALIZERS\DESTRUCTORS
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Designated tile renderable initializer
//-----------------------------------------------------------------------------------------------------------------------

- (id)initWithContainer:(OriHexGridContainer*)container andType:(oriUint)type
{
	if ( (self = [super initWithParent:container]) )
	{
		m_shapeDrawer	= [[OriShapeDrawer alloc] initRectangle];
		m_type			= type;
		
		[self updateShape:container];
	}
	return self;
}

//-----------------------------------------------------------------------------------------------------------------------
// Destructor
//-----------------------------------------------------------------------------------------------------------------------

- (void)dealloc
{
	[m_shapeDrawer release];
	
	[super dealloc];
}

//#######################################################################################################################
// OVERRIDINGS OF OriSceneObject
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// We are renderable object
//-----------------------------------------------------------------------------------------------------------------------

- (enSceneObjectType)type
{
	return eSceneObjectRenderable;
}

//-----------------------------------------------------------------------------------------------------------------------
// We are immutable
//-----------------------------------------------------------------------------------------------------------------------

- (BOOL)isMutable
{
	return NO;
}

//-----------------------------------------------------------------------------------------------------------------------
// Returns cell bounds
//-----------------------------------------------------------------------------------------------------------------------

- (oriRect)bounds
{
	return m_cellBounds;
}


//-----------------------------------------------------------------------------------------------------------------------
// Rendering cell
//-----------------------------------------------------------------------------------------------------------------------

- (void)render
{
	[m_shapeDrawer render];
}

//#######################################################################################################################
// INTERNAL USE
//#######################################################################################################################

//-----------------------------------------------------------------------------------------------------------------------
// Updates cell shape parameters base on container values
//-----------------------------------------------------------------------------------------------------------------------

- (void)updateShape:(OriHexGridContainer*)container
{
	oriIntSize size = { container.propCellWidth, container.propCellHeight };
	
	[m_shapeDrawer rectangleSetSize:size];
	
	OriSprite* cellSprite = container.propSprite;
	
	if (cellSprite)
	{
		OriSpriteAnimationFrame* frame = [[cellSprite getAnimationByIndex:0] getFrame:0];
		
		if (frame)
		{
			[m_shapeDrawer rectangleSetSize:size];
			[m_shapeDrawer rectangleSetMapping:frame.propMapRect];
			m_shapeDrawer.propTexture = cellSprite.propTexture;
		}
	}
	
	m_cellBounds.min.x	= 0;
	m_cellBounds.min.y	= 0;
	m_cellBounds.max.x	= size.width;
	m_cellBounds.max.y	= size.height;
	
	oglColor redColor = {255, 0, 0, 255};
	
	if (m_type == 3)
		m_shapeDrawer.propColor = redColor;
}


@end

